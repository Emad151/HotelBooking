// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace HotelBookingSystem.Models;

public partial class HotelBookingSystemContext : DbContext
{
    public HotelBookingSystemContext(DbContextOptions<HotelBookingSystemContext> options)
        : base(options)
    {
    }

    public virtual DbSet<DailyRoomAvailablity> DailyRoomAvailablities { get; set; }

    public virtual DbSet<Guest> Guests { get; set; }

    public virtual DbSet<Room> Rooms { get; set; }

    public virtual DbSet<RoomBooking> RoomBookings { get; set; }

    public virtual DbSet<RoomStock> RoomStocks { get; set; }

    public virtual DbSet<RoomType> RoomTypes { get; set; }

    public virtual DbSet<Token> Tokens { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<DailyRoomAvailablity>(entity =>
        {
            entity.ToTable("DailyRoomAvailablity");

            entity.Property(e => e.Day).HasColumnType("datetime");
            entity.Property(e => e.IsAvailable).HasDefaultValue(true);

            entity.HasOne(d => d.Room).WithMany(p => p.DailyRoomAvailablities)
                .HasForeignKey(d => d.RoomNumber)
                .HasConstraintName("FK_DailyRoomAvailablity_Room");
        });

        modelBuilder.Entity<Guest>(entity =>
        {
            entity.ToTable("Guest");

            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Room>(entity =>
        {
            entity.HasKey(e => e.RoomNumber);

            entity.ToTable("Room");

            entity.Property(e => e.RoomNumber).ValueGeneratedNever();

            entity.HasOne(d => d.RoomType).WithMany(p => p.Rooms)
                .HasForeignKey(d => d.RoomTypeId)
                .HasConstraintName("FK_Room_RoomType");
        });

        modelBuilder.Entity<RoomBooking>(entity =>
        {
            entity.ToTable("RoomBooking");

            entity.Property(e => e.CheckIn).HasColumnType("datetime");
            entity.Property(e => e.CheckOut).HasColumnType("datetime");
            entity.Property(e => e.NumberOfChildren).HasDefaultValue(0);

            entity.HasOne(d => d.Guest).WithMany(p => p.RoomBookings)
                .HasForeignKey(d => d.GuestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RoomBooking_Guest");

            entity.HasMany(d => d.RoomNumbers).WithMany(p => p.Bookings)
                .UsingEntity<Dictionary<string, object>>(
                    "BookedRoom",
                    r => r.HasOne<Room>().WithMany()
                        .HasForeignKey("RoomNumber")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_BookedRooms_Room"),
                    l => l.HasOne<RoomBooking>().WithMany()
                        .HasForeignKey("BookingId")
                        .HasConstraintName("FK_BookedRooms_RoomBooking"),
                    j =>
                    {
                        j.HasKey("BookingId", "RoomNumber");
                        j.ToTable("BookedRooms");
                    });
        });

        modelBuilder.Entity<RoomStock>(entity =>
        {
            entity.ToTable("RoomStock");

            entity.Property(e => e.Day)
                .HasColumnType("datetime")
                .HasColumnName("day");
        });

        modelBuilder.Entity<RoomType>(entity =>
        {
            entity.ToTable("RoomType");

            entity.Property(e => e.Description)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Token>(entity =>
        {
            entity.ToTable("Token");

            entity.Property(e => e.TokenValue)
                .IsRequired()
                .HasMaxLength(255);

            entity.HasOne(d => d.Guest).WithMany(p => p.Tokens)
                .HasForeignKey(d => d.GuestId)
                .HasConstraintName("FK_Token_Guest");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}